{"dependencies":[{"name":"invariant"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _invariant = require(\"invariant\");\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Grid = function () {\n  function Grid(width, height, cells) {\n    _classCallCheck(this, Grid);\n\n    (0, _invariant2.default)(width > 0, \"width must be positive\");\n    (0, _invariant2.default)(height > 0, \"height must be positive\");\n\n    this.width = width;\n    this.height = height;\n\n    if (cells != null) {\n      (0, _invariant2.default)(cells.length === width * height, \"initial cell length must equal WxH\");\n\n      this.cells = cells;\n    } else {\n      this.cells = new Array(width * height).fill(null);\n    }\n  }\n\n  _createClass(Grid, [{\n    key: \"coordsToIndex\",\n    value: function coordsToIndex(x, y) {\n      (0, _invariant2.default)(x >= 0, \"x must be greater than 0\");\n      (0, _invariant2.default)(x < this.width, \"x must be less than width\");\n      (0, _invariant2.default)(y >= 0, \"y must be greater than 0\");\n      (0, _invariant2.default)(y < this.height, \"y must be less than height\");\n\n      return x + y * this.width;\n    }\n  }, {\n    key: \"indexToXCoord\",\n    value: function indexToXCoord(index) {\n      (0, _invariant2.default)(index >= 0, \"index must be greater than 0\");\n      (0, _invariant2.default)(index < this.length, \"index must be less than length\");\n\n      return index % this.width;\n    }\n  }, {\n    key: \"indexToYCoord\",\n    value: function indexToYCoord(index) {\n      (0, _invariant2.default)(index >= 0, \"index must be greater than 0\");\n      (0, _invariant2.default)(index < this.length, \"index must be less than length\");\n\n      return Math.floor(index / this.width);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _this = this;\n\n      this.cells.forEach(function (cell, index) {\n        var x = _this.indexToXCoord(index);\n        var y = _this.indexToYCoord(index);\n        callback(cell, x, y, _this);\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      var _this2 = this;\n\n      var newCells = new Array(this.length);\n\n      this.forEach(function (cell, x, y) {\n        var index = _this2.coordsToIndex(x, y);\n        newCells[index] = callback(cell, x, y, _this2);\n      });\n\n      return new Grid(this.width, this.height, newCells);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      (0, _invariant2.default)(this.cells.length === this.width * this.height, \"length must be consistent\");\n\n      return this.cells.length;\n    }\n  }]);\n\n  return Grid;\n}();\n\nexports.default = Grid;"},"hash":"e40d97bea1d2ab89033339901f02f0e8"}